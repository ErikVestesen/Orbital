<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;

//gravity = 0.6
gravity_direction = 270;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Get the player's input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
/*
if(key_right) {
    view_angle[0] += 3.5; 
    gravity_direction -=3.5; 
}
if(key_left) {
    view_angle[0] -= 3.5; 
    gravity_direction +=3.5; 
}  
*/

x = obj_planet.x+lengthdir_x(length,direction);
y = obj_planet.y+lengthdir_y(length,direction);

if (keyboard_check(key_left))
    direction += 4;
if (keyboard_check(key_right))
    direction -= 4;

hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_planet))
{
    vsp = key_jump * -jumpspeed
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_planet))
{
    while(!place_meeting(x+sign(hsp),y,obj_planet))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_planet))
{
    while(!place_meeting(x,y+sign(vsp),obj_planet))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
/*
LEFT = keyboard_check(ord('A'));
RIGHT = keyboard_check(ord('D'));
UP = keyboard_check(ord('W'));
DOWN = keyboard_check(ord('S'));
playerSpeed = 2;

if (LEFT){ 
    x -= playerSpeed;
    view_angle[0] -= 3.5; 
    gravity_direction +=3.5;  
}
if (RIGHT){ 
    x += playerSpeed; 
    view_angle[0] += 3.5;
    gravity_direction -=3.5;
}
if (UP){ 
    y -= playerSpeed; 
}
if (DOWN){ 
    y += playerSpeed; 
}

if(!place_meeting(x,y,obj_planet)) {
    
}*/

/*
//planetwidth = sprite_get_width(planet)/2;
planetwidth = 1850;

point = point_direction(x,y,1850,1850);
image_angle = point+90;

if collision_point (x+lengthdir_x(1,point),y+lengthdir_y(1,point),obj_planet,true,false) {
    gravity = 0;
    gravity_direction=point;
    speed = 0;
} else {
    gravity = .5;
    gravity_direction=point;
}

if(keyboard_check(vk_right)) {
    sprite_index = sprite0; // spr_moving
    image_xscale = -1;
    image_speed = .5;
    motion_add(point+90.2,4)
}

if(keyboard_check(vk_left)) {
    sprite_index = sprite0; // spr_moving
    image_xscale = 1;
    image_speed = .5;
    motion_add(point-90.2,4)
}

if (hspeed = 0) {
    sprite_index = sprite0; // spr_standing_still 
}
if keyboard_check(vk_up) {
    sprite_index = sprite0; // spr_jumping
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
